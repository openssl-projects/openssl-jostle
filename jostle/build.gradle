dependencies {

}


sourceSets {
    java9 {
        java {
            srcDirs("src/main/java9")
        }
    }

    java17 {
        java {
            srcDirs('src/main/java17')
        }
    }

    java22 {
        java {
            srcDirs('src/main/java22')
        }
    }

    java25 {
        java {
            srcDirs('src/main/java25')
        }

    }
}


dependencies {
    java9Implementation files([sourceSets.main.output.classesDirs]) {
        builtBy compileJava
    }

    java17Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs]) {
        builtBy compileJava9Java
    }

    java22Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs,
            sourceSets.java17.output.classesDirs]) {
        builtBy compileJava17Java
    }

    java25Implementation files([
            sourceSets.main.output.classesDirs,
            sourceSets.java9.output.classesDirs,
            sourceSets.java17.output.classesDirs,
            sourceSets.java22.output.classesDirs
    ]) {
        builtBy compileJava22Java
    }

}


compileJava {
    options.release = 8
}


compileJava9Java {
    options.sourcepath = files(['src/main/java', 'src/main/java9'])
    options.release = 9
}


compileJava17Java {
    options.release = 17
}

compileJava22Java {
    options.release = 22
}

compileJava25Java {
    options.release = 25
}

tasks.register('javadocJar', Jar) {
    archiveBaseName = "openssl-jostle"
    archiveClassifier = 'javadoc'
    from javadoc.outputs
}


tasks.register('sourcesJar', Jar) {
    archiveBaseName = "openssl-jostle"
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude("**/*.so")
    into('META-INF/versions/9') {
        from sourceSets.java9.allSource
    }
    into('META-INF/versions/17') {
        from sourceSets.java17.allSource
    }
    into('META-INF/versions/22') {
        from sourceSets.java22.allSource
    }

    into('META-INF/versions/25') {
        from sourceSets.java25.allSource
    }
}

jar {
    jar.archiveBaseName = "openssl-jostle"
    from sourceSets.main.output

    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }

    into('META-INF/versions/17') {
        from sourceSets.java17.output
    }

    into('META-INF/versions/22') {
        from sourceSets.java22.output
    }

    into('META-INF/versions/25') {
        from sourceSets.java25.output
    }

    String v = "${rootProject.extensions.ext.bundle_version}"
    manifest.attributes('Multi-Release': 'true')
    manifest.attributes('Bundle-Name': 'openssl-jostle')
    manifest.attributes('Bundle-SymbolicName': 'jostle')
    manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-9')
    manifest.attributes('Export-Package': "!org.openssl.jostle.internal.*,org.openssl.*;version=${v}")
    manifest.attributes('Import-Package': 'java.*;resolution:=optional,javax.*;resolution:=optional')
    manifest.attributes('Bundle-Version': "${v}")

}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}


sourceSets {
    //
    // test & testXX - any atomic tests that can run in parallel with other tests
    // itest & itestXX - tests that must be run sequentially one JVM per invocation
    //

    test17 {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output
            runtimeClasspath += files(jar.archiveFile)
            srcDirs("src/test/java", "src/test/java17")
        }
    }

    test22 {
        java {
            compileClasspath += files(jar.archiveFile)
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output

            srcDirs("src/test/java", "src/test/java22")
        }
    }

    test25 {
        java {
            compileClasspath += files(jar.archiveFile)
            compileClasspath += main.output + test.output
            runtimeClasspath += test.output

            srcDirs("src/test/java", "src/test/java25")
        }
    }

}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.bouncycastle:bcprov-jdk18on:1.82' 
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    test17Implementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    test17Implementation 'org.bouncycastle:bcprov-jdk18on:1.82'
    test17RuntimeOnly 'org.junit.platform:junit-platform-launcher'

    test22Implementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    test22Implementation 'org.bouncycastle:bcprov-jdk18on:1.82'
    test22RuntimeOnly 'org.junit.platform:junit-platform-launcher'

    test25Implementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    test25Implementation 'org.bouncycastle:bcprov-jdk18on:1.82'
    test25RuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


compileTestJava {
    options.release = 8;
}

compileTest17Java {
    options.release = 17
}

compileTest22Java {
    options.release = 22
}

compileTest25Java {
    options.release = 25
}

//
// standard test project just runs with whatever JVM is available
//
tasks.named('test', Test) {

    useJUnitPlatform()

    jvmArgs = ['-Dtest.java.version.prefix=any', '-Dtest.java.interface_type=any']

    maxHeapSize = '2G'


    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}


tasks.register('unitTest8', Test) {
    onlyIf { System.getenv("BC_JDK8") != null }

    dependsOn(jar)
    useJUnitPlatform()

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1;
    maxParallelForks = 8;

    //systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    jvmArgs = ['-Dtest.java.version.prefix=1.8', '-Dtest.java.interface_type=jni']

    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}

tasks.register('unitTest17', Test) {
    onlyIf { System.getenv("BC_JDK17") != null }

    dependsOn(jar)
    useJUnitPlatform()

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test17.runtimeClasspath
    testClassesDirs += sourceSets.test17.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1;
    maxParallelForks = 8;

    // systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=17', '-Dtest.java.interface_type=jni']

    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}

tasks.register('unitTest22FFI', Test) {
    onlyIf { System.getenv("BC_JDK22") != null }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test22.runtimeClasspath
    testClassesDirs += sourceSets.test22.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs


    forkEvery = 1;
    maxParallelForks = 8;

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(22)
    }

    jvmArgs = ['-Dtest.java.version.prefix=22', '-Dorg.openssl.jostle.loader.interface=ffi', '-Dtest.java.interface_type=ffi']
    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}

tasks.register('unitTest25FFI', Test) {
    onlyIf { System.getenv("BC_JDK25") != null }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test25.runtimeClasspath
    testClassesDirs += sourceSets.test25.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs


    forkEvery = 1;
    maxParallelForks = 8;

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(25)
    }

    jvmArgs = ['-Dtest.java.version.prefix=25', '-Dorg.openssl.jostle.loader.interface=ffi', '-Dtest.java.interface_type=ffi']
    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}



tasks.register('unitTest22JNI', Test) {
    onlyIf { System.getenv("BC_JDK22") != null }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test22.runtimeClasspath
    testClassesDirs += sourceSets.test22.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs


    forkEvery = 1;
    maxParallelForks = 8;

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(22)
    }

    jvmArgs = ['-Dtest.java.version.prefix=22', '-Dorg.openssl.jostle.loader.interface=jni', '-Dtest.java.interface_type=jni']
    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}

tasks.register('unitTest25JNI', Test) {
    onlyIf { System.getenv("BC_JDK25") != null }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test25.runtimeClasspath
    testClassesDirs += sourceSets.test25.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs


    forkEvery = 1;
    maxParallelForks = 8;

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(25)
    }

    jvmArgs = ['-Dtest.java.version.prefix=25', '-Dorg.openssl.jostle.loader.interface=jni', '-Dtest.java.interface_type=jni']
    filter {
        excludeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*Test*"
    }
}


//
// Integration tests run one fork at a time
//

tasks.register('integrationTest', Test) {

    useJUnitPlatform()

    jvmArgs = ['-Dtest.java.version.prefix=any', '-Dtest.java.interface_type=any']

    maxHeapSize = '2G'

    forkEvery = 1
    maxParallelForks = 1

    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }

}

tasks.register('integrationTest8', Test) {
    onlyIf { System.getenv("BC_JDK8") != null }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }


    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath
    testClassesDirs = sourceSets.test.output.classesDirs

    forkEvery = 1;
    maxParallelForks = 1;

    //systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=1.8', '-Dtest.java.interface_type=jni']

    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}

tasks.register('integrationTest17', Test) {
    onlyIf { System.getenv("BC_JDK17") != null }

    dependsOn(jar)
    useJUnitPlatform()


    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test17.runtimeClasspath
    testClassesDirs = sourceSets.test17.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1;
    maxParallelForks = 1;

    // systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    jvmArgs = ['-Dtest.java.version.prefix=17', '-Dtest.java.interface_type=jni']
    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}

tasks.register('integrationTest22FFI', Test) {
    onlyIf { System.getenv("BC_JDK22") != null }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(22)
    }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test22.runtimeClasspath
    testClassesDirs += sourceSets.test22.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1
    maxParallelForks = 1

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=22', '-Dorg.bouncycastle.jostle.loader.interface=ffi', '-Dtest.java.interface_type=ffi']
    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}

tasks.register('integrationTest25FFI', Test) {
    onlyIf { System.getenv("BC_JDK25") != null }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(25)
    }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test25.runtimeClasspath
    testClassesDirs += sourceSets.test25.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1
    maxParallelForks = 1

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=25', '-Dorg.bouncycastle.jostle.loader.interface=ffi', '-Dtest.java.interface_type=ffi']
    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}



tasks.register('integrationTest22JNI', Test) {
    onlyIf { System.getenv("BC_JDK22") != null }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(22)
    }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test22.runtimeClasspath
    testClassesDirs += sourceSets.test22.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1
    maxParallelForks = 1

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=22', '-Dorg.bouncycastle.jostle.loader.interface=jni', '-Dtest.java.interface_type=jni']
    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}

tasks.register('integrationTest25JNI', Test) {
    onlyIf { System.getenv("BC_JDK25") != null }

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(25)
    }

    dependsOn(jar)
    useJUnitPlatform()

    classpath = files(jar.archiveFile) + sourceSets.test.runtimeClasspath + sourceSets.test25.runtimeClasspath
    testClassesDirs += sourceSets.test25.output.classesDirs
    testClassesDirs += sourceSets.test.output.classesDirs

    forkEvery = 1
    maxParallelForks = 1

    //  systemProperty 'bc.test.data.home', bcTestDataHome
    maxHeapSize = "1536m"


    jvmArgs = ['-Dtest.java.version.prefix=25', '-Dorg.bouncycastle.jostle.loader.interface=jni', '-Dtest.java.interface_type=jni']
    filter {
        includeTestsMatching "*IntegrationTest*"
        includeTestsMatching "*OpsTest*"
    }
}


test.dependsOn("integrationTest")


if (System.getenv("BC_JDK8") != null) {
    System.out.println("${project.name}: Adding test8 as dependency for test task because BC_JDK8 is defined")
    test.dependsOn("unitTest8")
    test.dependsOn("integrationTest8")
}

if (System.getenv("BC_JDK17") != null) {
    System.out.println("${project.name}: Adding test17 as dependency for test task because BC_JDK17 is defined")
    test.dependsOn("unitTest17")
    test.dependsOn("integrationTest17")
}

if (System.getenv("BC_JDK22") != null) {
    System.out.println("${project.name}: Adding test22 as dependency for test task because BC_JDK22 is defined")
    test.dependsOn("unitTest22JNI")
    test.dependsOn("integrationTest22JNI")
    test.dependsOn("unitTest22FFI")
    test.dependsOn("integrationTest22FFI")
}

if (System.getenv("BC_JDK25") != null) {
    System.out.println("${project.name}: Adding test25 as dependency for test task because BC_JDK25 is defined")
    test.dependsOn("unitTest25JNI")
    test.dependsOn("integrationTest25JNI")
    test.dependsOn("unitTest25FFI")
    test.dependsOn("integrationTest25FFI")
}


tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
